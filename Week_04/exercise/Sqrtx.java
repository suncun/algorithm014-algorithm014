//Implement int sqrt(int x). 
//
// Compute and return the square root of x, where x is guaranteed to be a non-ne
//gative integer. 
//
// Since the return type is an integer, the decimal digits are truncated and onl
//y the integer part of the result is returned. 
//
// Example 1: 
//
// 
//Input: 4
//Output: 2
// 
//
// Example 2: 
//
// 
//Input: 8
//Output: 2
//Explanation: The square root of 8 is 2.82842..., and since 
//¬†            the decimal part is truncated, 2 is returned.
// 
// Related Topics Êï∞Â≠¶ ‰∫åÂàÜÊü•Êâæ 
// üëç 492 üëé 0

//È¢òÁõÆ:[69]sqrtx  
package demo.leetcode.editor.cn;

public class Sqrtx {
    public static void main(String[] args) {
        Solution solution = new Sqrtx().new Solution();
        System.out.println(solution.mySqrt(64));
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    //‰∫åÂàÜÊü•Êâæ
    //y=x^2,x>0
    //Êó∂Èó¥Â§çÊùÇÂ∫¶O(logN)
    class Solution {
        public int mySqrt(int x) {
            if (x == 0 || x == 1) {
                return x;
            }
            long low = 1, high = x, mid;
            while (low <= high) {
                //Èô§‰ª• 2 Êìç‰ΩúËΩ¨ÂåñÊàê‰ΩçËøêÁÆó low+((high-low)>>1)„ÄÇÂõ†‰∏∫Áõ∏ÊØîÈô§Ê≥ïËøêÁÆóÊù•ËØ¥ÔºåËÆ°ÁÆóÊú∫Â§ÑÁêÜ‰ΩçËøêÁÆóË¶ÅÂø´ÂæóÂ§ö
                mid = low + ((high - low) >> 1);
                if (mid * mid > x) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
            return (int) high;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}